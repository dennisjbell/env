export CPPFLAGS=-I/opt/X11/include

# PostgreSQL
if [ -d "/usr/local/postgresql/bin" ] ; then
  export PGUSER=dbell
  export PGDATA=/var/db/postgresql/active/data
  export PGLOG=/var/log/postgresql/server.log
  export PATH=/usr/local/postgresql/bin:$PATH
fi

# Editor
export EDITOR=vim
alias vi='\vim'
alias :e="$EDITOR"

removehost() {
  ssh-keygen -R $(head -$1 ~/.ssh/known_hosts | tail -1 | awk '{print $1}' | sed -e 's/,.*//')
}

getip() {
  dig +short myip.opendns.com @resolver1.opendns.com.
  echo ""
}

# Node.js
if [ -d /usr/local/lib/node_modules ] ; then
  export NODE_PATH=/usr/local/lib/node_modules
fi

# Navigation
mcd() {
  mkdir -p "$1"
  cd "$1"
}

__code_base_dir() {
  local base="$DJBELL_BASE/code"
  if [ ! -d $base ] ; then
    base="/code"
    if [ ! -d $base ] ; then
      base=""
    fi
  fi
  echo "$base"
}


goco() {

  local base="$(__code_base_dir)"
  if [[ -z "$base" ]] 
  then
    echo "No $DJBELL_BASE/code or /code directory found"
    return 1
  fi

  local match="$(echo $1 | fold -w1 | paste -sd' ' - | sed -e 's/ /.*/g')"

  local dir="$(find $base -type d | \
    grep -v '/.git\(/\|$\)' | \
    grep "$match" | \
    awk '{ a=$0; gsub(/[^\/]/,"",$0); print length, length(a), a}' |\
    sort -k1,1n -k2,2n -k3,3d | \
    cut -d ' ' -f 3- | \
    head -n1)"

  if [[ -n "$dir" ]] ; then
    cd $dir
    [[ -f $DJBELL_BASE/bin/label ]] && label "[$(pwd | sed -E 's|.*/code/(src/)?[^/]*/([^/]*)/([^/]*).*|\2/\3|')@$(hostname)]"
    return 0
  else
    echo "No match found"
    return 1
  fi
}

gogit() {

  local base="$(__code_base_dir)"
  if [[ -z "$base" ]] 
  then
    echo "No $DJBELL_BASE/code or /code directory found"
    return 1
  fi
  [[ -d ${base}/src ]] && base="${base}/src"

  local host
  local org
  local repo

  # If we're in the code path
  path_info="$(pwd | sed -E 's|.*/code/(src/)?(([^/]+)(/([^/]+)(/([^/]+))?))?|\3 \5 \7|')"
  echo $path_info
  if [[ "$path_info" != "$(pwd)" ]] 
  then
    read host org repo <<< $path_info
    echo "Host: $host ; Org: $org ; Repo: $repo"
    if [[ $host == 'src' ]]
    then
      read host org  <<< "$org $repo "
      repo=''
    fi
  fi

  # Check the args for replacements
  if [[ "${#@}" -gt "3" ]]
  then
    echo "Too many arguments: Expecting 0-3 arguments [[[host] org] repo] -- got $@"
    return 1
  fi

  # Replace components with args given
  case ${#@} in 
    3)
      read host org repo <<< "$@" ;;
    2)
      read org repo <<< "$@" ;;
    1)
      repo="$1" ;;
  esac

  # Check we got it all
  if [[ -z "$host" ]] 
  then
    host="github.com"
    echo "Host cannot be determined from path and was not provided - assuming github.com"
  elif [[ -z "$org" ]]
  then
    echo "Organization cannot be determined from path and was not provided"
    return 1
  elif [[ -z "$repo" ]] 
  then
    echo "Repository cannot be determined from path and was not provided"
    return 1
  fi

  cd ${base}
  echo "Creating ${base}/${host}/${org}/${repo} if needed"
  mkdir -p "${host}/${org}/${repo}"
  cd ${host}/${org}/${repo}

  local host_connect
  if [[ -f "${base}/${host}/.host_connect" ]]
  then 
    host_connect="$(cat "${base}/${host}/.host_connect")"
  else
    host_connect="git@${host}:"
  fi
  if [[ -d .git ]] ; then
    echo "Repository exists, refreshing from upstream..."
    echo ">" git fetch --all
    git fetch --all
  else
    echo "Cloning from upstream..."
    echo ">" git clone "${host_connect}${org}/${repo}" .
    git clone "${host_connect}${org}/${repo}" .
  fi
}

alias ls="\ls -aFG"
alias la="\ls -laFG"
alias lsf="ls -lFAGht"
alias lsc="ls -lhG"
alias lsa='ls -lhA'
alias lst='ls -lht'
alias lsa="ls -lAht"
alias ..="cd .."
alias cdd="cd -"

# Compare
alias same="diff --unchanged-group-format=i"'"'"@@ %dn,%df%c'\012'%<"'"'" --old-group-format='' --new-group-format='' --changed-group-format=''"

if command -v pygmentize >/dev/null 2>&1
then
  alias cncat='pygmentize -g -O style=colorful,linenos=1'
  alias ccat='pygmentize -g -O style=colorful'
fi

if command bat --version 2>/dev/null ; then
  alias cat="bat"
fi

# Search
alias fid='find . -regex '\''.*'\'' | xargs grep'

# Archiving
alias zipr="zip -r"
alias tgzc="tar -zcvf"
alias tgzx="tar -zxvf"

# -----------------------------------------------------------------------------
# Git Aliases
# -----------------------------------------------------------------------------
export PATH="$DJBELL_BASE/bin/git-utils:$PATH"

# Git Add
alias ga="git add"
alias gaa="git add ."

# Git Commit
alias gc="git commit --verbose -p"

# Git Checkout
alias gcom="git checkout master"
alias gco="git checkout"
alias gcob="git checkout master && git pull origin master && git checkout -b"

# Git Rebase
alias grim="git rebase -i origin/master"

# Git pull
alias gup="git pull origin master"
alias gpu="git pull origin master"

# Git Log
alias gl="git log"
alias glog="git log"

# Git Status
alias gs="git status"
alias gstat="git status"

# Git Diff
alias gd="git diff -b"
alias gdiff="git diff"

if [ ! -z "$BASH_VERSION" -a ! -z "$PS1" ] ; then
  # Git should I push?
  alias push?="git cherry -v origin/master"
fi


# Git Branch
alias gb="git branch"
alias gbc="git branch | grep '* ' | awk ' {print \$2}'"
alias gbr="git branch -r"

# Git Fetch
alias gfa="git fetch --all"
alias grr='diffs="$(git status | grep "both modified:" | sed -e "s/.*both modified: *//")" vim $diffs && git add $diffs && git rebase --continue'

# Use vi mode
#set -o vi

# -----------------------------------------------------------------------------
# Network aliases and functions
# -----------------------------------------------------------------------------
showcert() {
  echo | \
    openssl s_client -showcerts -servername $1 -connect $1:${2:-443} 2>/dev/null | \
    openssl x509 -inform pem -noout -text
}


# -----------------------------------------------------------------------------
# colorize
# -----------------------------------------------------------------------------
color() {
  local colors=" k=0 r=1 g=2 y=3 b=4 m=5 p=5 c=6 w=7 "
  local ansi="" c="$(echo "$2" | tr "[:upper:]" "[:lower:]")"
  local fg="${c:0:1}" bg="${c:1:1}"
  if [[ -n "${fg}" ]] ; then
    ansi="3$(echo "$colors" | sed "s/.* ${fg}=\\([^ ]*\\) .*/\\1/")"
    [[ "${#ansi}" -eq 2 ]] || ansi=""
    [[ "${fg}" == "${2:0:1}" || -z "$ansi" ]] || ansi="1;${ansi}"
  fi
  if [[ -n "${bg}" ]] ; then
    local bg_ansi="4$(echo "$colors" | sed "s/.* ${bg}=\\([^ ]*\\) .*/\\1/")"
    [[ "${#bg_ansi}" -eq 2 ]] && ansi="${ansi:+$ansi;}$bg_ansi"
  fi
  printf "\x1b[${ansi}m%b\x1b[0m" "$1"
}

rainbow() {
  colors="rRyYGCbp"; ci=-1
  si=0;
  out=""
  local str="$(printf "%b" "$1.")"
  str="${str:0:${#str}-1}" # preserve trailing newlines
  while [[ $si -lt "${#str}" ]] ; do
    ch="${str:$si:1}"
    if [[ "$ch" =~ ^[[:print:]]$ ]] ; then
      let 'ci++'
      out="${out}$(color "$ch" ${colors:$((ci % 8 )):1}$2)"
    else
      out="$out$ch"
    fi
    let "si++"
  done
  printf "%b" "$out"
}

contains() {
  # returns 0 if present, 1 if not; outputs index where element found
  # NOTE: index is 1-based, to support $@;
  local el=$1; shift
  local re_mode=false
  if [[ "$el" =~ ^/.*/$ ]] ; then
    re_mode=true
    el="${el:1:${#el}-2}"
  fi
  local i=1
  while (( $# > 0 )) ; do
    local found=false
    if $re_mode ; then
      [[ "$1" =~ $el ]] && found=true
    else
      [[ "$1" == "$el" ]] && found=true
    fi
    if $found ; then
      echo $i;
      return 0
    fi
    shift
    (( ++i ))
  done
  return 1
}

alias ppry="perl -Ilib -MPry -e 'pry;'"

Files() {
  diff "$1" "$3"
}
